########################################### GIT ######################################################################

-> Git is an open source, distributed version control system (VCS). It’s commonly used for source code management (SCM).
. Git - Git is system for version control primarily used by programmers and others who writs code.
      - It runs at the command line on your local machine.
	  - It allows you to keep track of your files and modifications to those files in something called a repository (repo).
	  - To track last five changes to the rep :#git log -5 
	  - you can use it with a team of people who are working on the same project.
	  - It's useful in team env because everyone can work independently on those files.
	  
. Git Hub - Git HUb is website that allows you to upload your Git repositories online.
          - It gives GUI for navigating your repos.
		  - It gives other peoples navigate your repos.
		  - Finally it makes repo collaboration easy.
		  
1. How to initialize an empty git repository.
2. How to stage and commit the files.
3. How to create Branch and swith b/w diff Branches.
4. How to revert to older file version by swithing to another Branch.
5. How to merge two Branches.

############################ Git commands ###############################

#git initialize
 
 - we have made new file test.txt.we will write something into.
 - now, we will stage the file to saved into repository by 'git add <f.n>' and commit the changes by 'git commit -m <message>'
 - we have made our first commit!Now, we will make another branch out of this commit and make changes to the file from this new branch while 
    we will call as 'secondary'
 - #git branch secondary : does not take you that branch! Remember your current branch name is displayed in the parenthesis which is still master.
 - To change branch : #git checkout <fn>
 - we have changed the file ...lets commit our changes as we did before!
 
 - Ok now switch to master branch again and see what we have in our test.txt file.
 - Wow! the file is not changed as it was saved first in master branch.This is major advantages of branching which lets your files
   have multiple versons and lets you switch b/w them any time conviniently.
   
 -> Now lets create another file here in master branch and then we'll merge both branches together and see the results.
    add this file to staging files and commit changes.

-> we have two files now ...we'll now merge the secondary branch with master so that master will have updated copy of "test.txt" from secondary branch.

-> lists branches merged into master: #git branch --merged master
-> lists branches merged into HEAD: #git branch --merged
-> lists branches that have not been merged: #git branch --no-merged
-> By default this applies to only the local branches. 
    -> -a flag will show both local and remote branches, and the -r flag shows only the remote branches.
-> you can delete it locally: #git branch -d mybranch
-> To check the branchs list :#git branch -va


############################################################################################################################

-> To create branch #git branch <branchname>
-> Enter branch : #git checkout <branchname>
-> Back to master branch : #git checkout master
-> merge the master branch: #git merge newbranch
-> To push the update data to repo: #git push origin master
-> To delete local branch : #git branch -d branchname
-> Check list of branches :#git branch
-> pull the updated data : git pull http link.
-> create and enter new branch : git checkout -b branchname
-> To update current branch to master : git rebase master
-> add the remote origin : git remote add origin link.

####################################

-> Github allows you to:  . share your repositories with others.
                          . Access other user's repositories.
                          . Store remote copies of your repositories (github servers) as backup of your local copies.
			  . GitHub is a hosting service for Git repositories.			  
						  
####################################

-> Rebase : . As an alternative to merging, you can rebase the feature branch onto master branch using the following commands:
              # git checkout feature
              # git rebase master
			 . The major benefit of rebasing is that you get a much cleaner project history. 
			 . First, it eliminates the unnecessary merge commits required by git merge.
			 . Second, as you can see in the above diagram, rebasing also results in a perfectly linear project history
		  